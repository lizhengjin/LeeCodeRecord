# LeeCodeRecord
记录刷题过程,坚持!!!!!
56. 合并区间
给出一个区间的集合，请合并所有重叠的区间。
示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-intervals
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

思路步骤: 1.显示通过排序,保证区间左边界,是按照升序排列的
         2. 比较[i][1] >= [i+1][0]  这样才出现重叠 
            [i][1] < [i+1][0]  直接加
         如 区间 [1,3] 和 [2,6] 重叠 , 就是比较3和6
         
第一种方法是可以在LeetCode上提交的
```java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class MergeRanse2 {
   public static int[][] merge(int[][] intervals){
	   if (intervals.length < 2) {
		  return intervals;
	   }
	   Arrays.sort(intervals, new Comparator<int[]>() {

		@Override
		public int compare(int[] o1, int[] o2) {
			// TODO Auto-generated method stub
			return o1[0] - o2[0];
		}  
	});
	   List<int[]> list = new ArrayList<int[]>();
	   for (int i = 0; i < intervals.length -1; i++) {
		if(intervals[i+1][0] <= intervals[i][1]) { 
			intervals[i+1][0] = intervals[i][0];
			intervals[i+1][1] = Math.max(intervals[i+1][1], intervals[i][1]);
		} else {
			list.add(intervals[i]);
		}
	}
	   list.add(intervals[intervals.length -1]);
	   int[][] res = new int[list.size()][2];
	   for (int i = 0; i < list.size(); i++) {
		res[i][0] = list.get(i)[0];
		res[i][1] = list.get(i)[1];
		System.out.print(res[i][0]);
		System.out.print(res[i][1]);
	}
	   return  res;
   }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        int[][] list = {{1,3},{2,6},{8,10},{15,18}};
          merge(list);
     
	}
 
}

```
第二种方法:是官方提供的,但是没有提供Interval结构体,我这里加上了,思路都是一样的,但是提交会报错的
```java
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;


class Interval {
	int start, end;
	Interval(){
		start = 0;
		end   = 0;
	}
	Interval(int s, int e) {
		start = s;
		end   = e;
	}
}

public class MergeRange {

	private class IntervalComparator implements Comparator<Interval>{

		@Override
		public int compare(Interval a, Interval b) {
			// TODO Auto-generated method stub
			return a.start < b.start ? -1 : a.start == b.start ? 0 : 1;
		}
		
	}
	public   List<Interval> merge(List<Interval> intervals) {
		Collections.sort(intervals, new IntervalComparator());
		LinkedList<Interval> merged = new LinkedList<Interval>();
		for (Interval interval : intervals) {
			if (merged.isEmpty() || merged.getLast().end < interval.start) {
				merged.add(interval);
			}
			else {
				merged.getLast().end = Math.max(merged.getLast().end, interval.end);
			}
		}
		return merged;
	}
}

swift版
class Merge_56: NSObject {
    func merge(_ intervals: [[Int]]) -> [[Int]] {
        var nums:[[Int]] = intervals
        if nums.count < 2 {
            return nums
        }
        nums.sort { (num1, num2) -> Bool in
            return num1[0] < num2[0]
        }
        var list: [[Int]] = [[Int]]()
        for i in 0..<nums.count-1 {
            if nums[i][1] >= nums[i+1][0] {
                nums[i+1][0] = nums[i][0]
                nums[i+1][1] = max(nums[i][1], nums[i+1][1])
            } else{
                list.append(nums[i])
            }
        }
        list.append(nums[nums.count-1])
        return list;
    }
        func test() {
//            let nums:[[Int]] = [[1,3],[2,6],[8,10],[15,18]]
             let nums:[[Int]] = [[1,4],[4,5]]
             let num:[[Int]] = merge(nums)
             print(num)
         }
}

```
